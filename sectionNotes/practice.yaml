apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      tolerations:
      - key: "memoryType"
        operator: "Equal"
        value: "ssd"
        effect: "NoSchedule"

      securityContext:
        runAsUser: 1000

      serviceAccount: my-service-account

      volumes:
      - name: volumeForMyDeployment
        persistentVolumeClaim:
          claimName: myappspvc
      - name: volume2


      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: disktype
                  operator: In
                  values:
                  - ssd
      
      nodeSelector: 
        disktype: ssd

      initContainers:
      - name: mybox
        image: busybox
        command:
        - "/bin/sh"
        - "-c"
        - "echo getting container ready"

      containers:
      - name: nginx
        image: nginx
        volumeMounts:
        - name: volumeForMyDeployment
          mountPath: /opt
        ports:
        - containerPort: 80
        command:
        - "/bin/sh"
        - "-c"
        - "echo hello kube"
        readinessProbe:
          httpGet: 
            path: /index.html
            port: 80
          tcpSocket:
            port: 3306
          exec:
            command:
            - cat
            - /app/is_ready
        resources:
          limits: 
            memory: "128Mi"
            cpu: .2
          requests:
            memory: "64Mi"
            cpu: .1
        env: 
        - name: MYVAR
          valueFrom:
            configMapKeyRef:
              name: nameOfConfigMap
              key: keyInConfigMap

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: myapp-pv
spec:
  capacity: 
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/data

--- 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-pvc
spec: 
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteOnce
  selector:
    matchLabels:
      app: myapp 
  volumeName: myapp-pv

--- 

apiVersion: v1
kind: Service
metadata:
  name: myNodeService
spec:
  type: NodePort
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80 # port on the service
      targetPort: 80 # port on the pod
      nodePort: 30080 # port accessed from outside the cluster

---

apiVersion: v1
kind: Service
metadata:
  name: myClusterService
spec:
  type: ClusterIP
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nameOfConfigMap
data:
  keyInConfigMap: valueToSendToDeployment

--- 

apiVersion: batch/v1
kind: Job
metadata:
  name: myAppJob
spec:
  completions: 3
  parallelism: 3
  backoffLimit: 4
  template:
    spec:
      containers:
      - name: math-job
        image: ubuntu
        command: 
        - 'expr'
        - '3 + 2'
      restartPolicy: Never
    
---

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: myAppCronJob
spec:
  schedule: '* * * * *'
  jobTemplate:
    spec: # input job spec here